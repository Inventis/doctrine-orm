<?php

declare(strict_types=1);

namespace Tests\RulerZ\Executor;

use Doctrine\ORM\AbstractQuery as Query;
use Doctrine\ORM\QueryBuilder;
use PHPUnit\Framework\TestCase;
use RulerZ\Context\ExecutionContext;
use Tests\RulerZ\Stub\ExecutorStub;

class FilterTraitTest extends TestCase
{
    /** @var ExecutorStub */
    private $executor;

    public function setUp()
    {
        $this->executor = new ExecutorStub();
    }

    public function testItCanApplyAFilterOnATarget()
    {
        $sql = 'some SQL generated by RulerZ';

        $queryBuilder = $this->createMock(QueryBuilder::class);

        $queryBuilder->expects($this->once())->method('setParameter')->with('foo', 'bar', $type = null);
        $queryBuilder->expects($this->once())->method('andWhere')->with($sql);

        ExecutorStub::$executeReturn = $sql;

        $filteretTarget = $this->executor->applyFilter($queryBuilder, $parameters = ['foo' => 'bar'], $operators = [], new ExecutionContext());

        $this->assertSame($queryBuilder, $filteretTarget, 'The trait is called and it returns the result generated by the executor');
    }

    public function testItCanApplyDetectedJoins()
    {
        $sql = 'some SQL generated by RulerZ';

        $queryBuilder = $this->createMock(QueryBuilder::class);

        $queryBuilder->expects($this->once())->method('leftJoin')->with('root_alias.join_column', 'join_alias');
        $queryBuilder->expects($this->once())->method('andWhere')->with($sql);

        ExecutorStub::$executeReturn = $sql;
        $this->executor->detectedJoins = [
            [
                'root' => 'root_alias',
                'column' => 'join_column',
                'as' => 'join_alias',
            ],
        ];

        $filteretTarget = $this->executor->applyFilter($queryBuilder, $parameters = [], $operators = [], new ExecutionContext());

        $this->assertSame($queryBuilder, $filteretTarget, 'The trait is called and it returns the result generated by the executor');
    }

    public function testItCanExecuteTheRequestAndReturnTheResultsAsATraversableObject()
    {
        $sql = 'some SQL generated by RulerZ';
        $results = ['result'];

        $queryBuilder = $this->createMock(QueryBuilder::class);
        $query = $this->createMock(Query::class);

        $queryBuilder->expects($this->once())->method('andWhere')->with($sql);

        $queryBuilder->method('getQuery')->willReturn($query);
        $query->method('getResult')->willReturn($results);

        ExecutorStub::$executeReturn = $sql;

        $returnedResults = $this->executor->filter($queryBuilder, $parameters = [], $operators = [], new ExecutionContext());

        $this->assertInstanceOf(\Traversable::class, $returnedResults);
        $this->assertEquals($results, iterator_to_array($returnedResults));
    }
}
